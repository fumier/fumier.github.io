<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qian&#39;s Note</title>
  
  <subtitle>要当凌云须举翼，何妨随处一开颜</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fumier.github.io/"/>
  <updated>2019-06-08T05:16:49.208Z</updated>
  <id>http://fumier.github.io/</id>
  
  <author>
    <name>程倩&lt;fumier@163.com&gt;</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode2_Add Two Numbers</title>
    <link href="http://fumier.github.io/2019/06/08/LeetCode2-Add-Two-Numbers/"/>
    <id>http://fumier.github.io/2019/06/08/LeetCode2-Add-Two-Numbers/</id>
    <published>2019-06-08T12:14:00.000Z</published>
    <updated>2019-06-08T05:16:49.208Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目简析"><a href="#题目简析" class="headerlink" title="题目简析"></a>题目简析</h3><p><strong>两个数存储在链表中，倒序排列的，分别相加，返回一个链表</strong></p><p><strong>算法详情：</strong><a href="https://leetcode.com/problems/add-two-numbers/" target="_blank" rel="noopener">Add Two Numbers</a></p><p>这道题的考察有两点：</p><ul><li>链表指针的处理</li><li>两数相加进位的处理</li></ul><h3 id="我的实现"><a href="#我的实现" class="headerlink" title="我的实现"></a>我的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1==<span class="keyword">null</span>&amp;&amp;l2==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(l1==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l2==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> rest=<span class="number">0</span>;</span><br><span class="line">        ListNode result=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> firstNode=<span class="keyword">false</span>;</span><br><span class="line">        ListNode resultHeader=<span class="keyword">null</span>;</span><br><span class="line">        ListNode resultPointer=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> value=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="keyword">null</span>&amp;&amp;l2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            value=l1.val+l2.val+rest;</span><br><span class="line">            rest=value&gt;<span class="number">9</span>?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            value=value%<span class="number">10</span>;</span><br><span class="line">            result=<span class="keyword">new</span> ListNode(value);</span><br><span class="line">            <span class="keyword">if</span>(!firstNode)&#123;</span><br><span class="line">               resultHeader=result; </span><br><span class="line">               resultPointer=resultHeader;</span><br><span class="line">               firstNode=<span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               resultPointer.next=result; </span><br><span class="line">               resultPointer=result;</span><br><span class="line">            &#125; </span><br><span class="line">            l1=l1.next;</span><br><span class="line">            l2=l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l1!=<span class="keyword">null</span>||l2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l2==<span class="keyword">null</span>)&#123;</span><br><span class="line">                   <span class="keyword">while</span>(l1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                       result=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">                       value=l1.val+rest;</span><br><span class="line">                       rest=value&gt;<span class="number">9</span>?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">                       value=value%<span class="number">10</span>;</span><br><span class="line">                       l1=l1.next;</span><br><span class="line">                       result.val=value;</span><br><span class="line">                       resultPointer.next=result; </span><br><span class="line">                       resultPointer=result;</span><br><span class="line">               &#125;   </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(l2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                 result=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">                 value=l2.val+rest; </span><br><span class="line">                 rest=value&gt;<span class="number">9</span>?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">                 value=value%<span class="number">10</span>;</span><br><span class="line">                 l2=l2.next;</span><br><span class="line">                 result.val=value;</span><br><span class="line">                 resultPointer.next=result; </span><br><span class="line">                 resultPointer=result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">          <span class="keyword">if</span>(rest!=<span class="number">0</span>)&#123;</span><br><span class="line">              result=<span class="keyword">new</span> ListNode(rest);</span><br><span class="line">              resultPointer.next=result; </span><br><span class="line">           &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> resultHeader;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    ListNode dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode p = l1, q = l2, curr = dummyHead;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span> || q != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = (p != <span class="keyword">null</span>) ? p.val : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> y = (q != <span class="keyword">null</span>) ? q.val : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = carry + x + y;</span><br><span class="line">        carry = sum / <span class="number">10</span>;</span><br><span class="line">        curr.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">        curr = curr.next;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span>) p = p.next;</span><br><span class="line">        <span class="keyword">if</span> (q != <span class="keyword">null</span>) q = q.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        curr.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>解题思路差不多，但是处理细节上，参考答案处理上更好一些。<ul><li>链表长短不一致时，循环的处理，都放在一起处理，而我的分开处理了。导致代码有点冗余了</li><li>参考答案，设置了一个空Node，返回数据时，返回这个Node的next即可。避免了我在循环内部设置变量，用来控制对头结点的处理。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目简析&quot;&gt;&lt;a href=&quot;#题目简析&quot; class=&quot;headerlink&quot; title=&quot;题目简析&quot;&gt;&lt;/a&gt;题目简析&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;两个数存储在链表中，倒序排列的，分别相加，返回一个链表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算法
      
    
    </summary>
    
      <category term="算法" scheme="http://fumier.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="LeetCode" scheme="http://fumier.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>动态代理模式</title>
    <link href="http://fumier.github.io/2019/06/03/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fumier.github.io/2019/06/03/代理模式/</id>
    <published>2019-06-02T22:39:23.000Z</published>
    <updated>2019-06-02T15:01:49.974Z</updated>
    
    <content type="html"><![CDATA[<p>本文旨在分析动态代理模式，其含义，应用场景以及实现原理。</p><h2 id="什么是动态代理模式？"><a href="#什么是动态代理模式？" class="headerlink" title="什么是动态代理模式？"></a>什么是动态代理模式？</h2><p><strong>代理模式：给目标对象提供一个代理对象，并由代理对象持有目标对象，来控制目标对象的访问。</strong><br>使用代理模式的好处是：在不改变目标对象方法的情况下，对方法进行增强。</p><h2 id="静态代理-amp-Demo"><a href="#静态代理-amp-Demo" class="headerlink" title="静态代理&amp;Demo"></a>静态代理&amp;Demo</h2><p>为什么有静态代理了还需要动态代理？</p><ul><li>静态代理类在编译期就已经确定，也就是有多个接口时，就要新建多个代理类。类增多，繁琐。</li></ul><p><img src="https://thumbnail0.baidupcs.com/thumbnail/40dbcbefcadb34a08202394afd4de3b1?fid=3272193238-250528-1031118466313634&amp;time=1559484000&amp;rt=sh&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-B48clFJAcp0MmJ6a67PIfQRE44s%3D&amp;expires=8h&amp;chkv=0&amp;chkbd=0&amp;chkpc=&amp;dp-logid=3547498477772529917&amp;dp-callid=0&amp;size=c710_u400&amp;quality=100&amp;vuk=-&amp;ft=video" alt="图片测试"></p><h2 id="动态代理-amp-Demo"><a href="#动态代理-amp-Demo" class="headerlink" title="动态代理&amp;Demo"></a>动态代理&amp;Demo</h2><h2 id="动态代理源码分析"><a href="#动态代理源码分析" class="headerlink" title="动态代理源码分析"></a>动态代理源码分析</h2><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jianshu.com/p/6e962d1e7ddd" target="_blank" rel="noopener">Java动态代理-实战</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文旨在分析动态代理模式，其含义，应用场景以及实现原理。&lt;/p&gt;
&lt;h2 id=&quot;什么是动态代理模式？&quot;&gt;&lt;a href=&quot;#什么是动态代理模式？&quot; class=&quot;headerlink&quot; title=&quot;什么是动态代理模式？&quot;&gt;&lt;/a&gt;什么是动态代理模式？&lt;/h2&gt;&lt;p&gt;&lt;s
      
    
    </summary>
    
      <category term="设计模式" scheme="http://fumier.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://fumier.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLocal学习</title>
    <link href="http://fumier.github.io/2019/06/02/ThreadLocal%E5%AD%A6%E4%B9%A0/"/>
    <id>http://fumier.github.io/2019/06/02/ThreadLocal学习/</id>
    <published>2019-06-02T15:27:48.000Z</published>
    <updated>2019-06-02T09:28:05.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么用ThreadLocal"><a href="#为什么用ThreadLocal" class="headerlink" title="为什么用ThreadLocal"></a>为什么用ThreadLocal</h2><p>在多线程的环境下，每个线程都有自己的数据。线程使用局部变量肯定比使用全局变量好。使用全局变量，一不小心就会引发线程安全问题，全局变量的修改必须加锁。而局部变量只有线程自己能看见，不会影响其他线程。但是局部变量有个缺点，如果别的函数也要使用，在函数调用的时候，需要通过参数的方式进行层层传递。<br>有没有更简单的方式，不需要传递，也能解决多线程安全问题。ThreadLocal为此而生。</p><h2 id="什么是ThreadLocal"><a href="#什么是ThreadLocal" class="headerlink" title="什么是ThreadLocal"></a>什么是ThreadLocal</h2><p>当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>初始化15个线程，每个线程都有自己的map，往map中写入20个值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public class ThreadLocalTest implements Runnable &#123;</span><br><span class="line">    int id;</span><br><span class="line">    private static final ThreadLocal&lt;HashMap&gt; threadLocal = new ThreadLocal&lt;HashMap&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        protected HashMap <span class="function"><span class="title">initialValue</span></span>() &#123;</span><br><span class="line">            <span class="built_in">return</span> new HashMap();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public ThreadLocalTest(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">        Map map=threadLocal.get();</span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; 20; i++) &#123;</span><br><span class="line">            map.put(i, i + id * 100);</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(100);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void <span class="function"><span class="title">printMap</span></span>()&#123;//不需要传递参数</span><br><span class="line">        Map map=threadLocal.get();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"#map.size()"</span> + map.size() + <span class="string">"#"</span> + map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Thread[] runs = new Thread[15];</span><br><span class="line">        ThreadLocalTest runnableTest = new ThreadLocalTest(1);</span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; runs.length; i++) &#123;</span><br><span class="line">            runs[i] = new Thread(runnableTest);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (int i = 0; i &lt; runs.length; i++) &#123;</span><br><span class="line">            runs[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="核心类-amp-核心方法"><a href="#核心类-amp-核心方法" class="headerlink" title="核心类&amp;核心方法"></a>核心类&amp;核心方法</h3><p>1.ThreadLocalMap<br>2.T get() 获取当前线程的副本变量值<br>3.void set(T value) 保存当前线程的副本变量值<br>4.void remove() 移除当前前程的副本变量值</p><h4 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a>ThreadLocalMap</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;<span class="comment">//ThreadLocal的内部静态类，</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * The entries in this hash map extend WeakReference, using</span></span><br><span class="line"><span class="comment">        * its main ref field as the key (which is always a</span></span><br><span class="line"><span class="comment">        * ThreadLocal object).  Note that null keys (i.e. entry.get()</span></span><br><span class="line"><span class="comment">        * == null) mean that the key is no longer referenced, so the</span></span><br><span class="line"><span class="comment">        * entry can be expunged from table.  Such entries are referred to</span></span><br><span class="line"><span class="comment">        * as "stale entries" in the code that follows.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;<span class="comment">//Entry继承WeakReference，它将以弱引用的方式被持有。</span></span><br><span class="line">          <span class="comment">//内部静态类以及弱引用都是防止内存泄漏的有效方式。</span></span><br><span class="line">           <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">           Object value;</span><br><span class="line"></span><br><span class="line">           Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">               <span class="keyword">super</span>(k);</span><br><span class="line">               value = v;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       ......</span><br><span class="line">        <span class="comment">//构造方法，初始化相关信息</span></span><br><span class="line">        ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">           table = <span class="keyword">new</span> Entry[INITIAL_CAPACITY];</span><br><span class="line">           <span class="comment">//threadLocalHashCode&amp;(INITIAL_CAPACITY - 1)，目的是让i小于数组长度。如果每个线程只存一个变量，那么一个key都是一样的。多个变量ThreadLocal变多，要考虑到初始长度。</span></span><br><span class="line">           <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">           table[i] = <span class="keyword">new</span> Entry(firstKey, firstValue);</span><br><span class="line">           size = <span class="number">1</span>;</span><br><span class="line">           setThreshold(INITIAL_CAPACITY);</span><br><span class="line">       &#125;</span><br><span class="line">       ......</span><br><span class="line">        <span class="function"><span class="keyword">private</span> Entry <span class="title">getEntry</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">           Entry e = table[i];</span><br><span class="line">           <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == key)<span class="comment">//如果有直接获取</span></span><br><span class="line">               <span class="keyword">return</span> e;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               <span class="keyword">return</span> getEntryAfterMiss(key, i, e); </span><br><span class="line">               <span class="comment">//如果插入的过程中，产生冲突，这里解决Hash冲突的方式不是链表的方式，而是采用线性探测的方式，根据初始key的hashcode值确定元素在table数组中的位置，如果发现这个位置上已经有其他key值的元素被占用，则利用固定的算法寻找一定步长的下个位置，依次判断，直至找到能够存放的位置。</span></span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ThreadLocal核心方法"><a href="#ThreadLocal核心方法" class="headerlink" title="ThreadLocal核心方法"></a>ThreadLocal核心方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocal</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();<span class="comment">//获取当前线程</span></span><br><span class="line">        ThreadLocalMap map = getMap(t);<span class="comment">//返回的是thread.threadLocals</span></span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">            map.set(<span class="keyword">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the map associated with a ThreadLocal. Overridden in</span></span><br><span class="line"><span class="comment">     * InheritableThreadLocal.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  t the current thread</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create the map associated with a ThreadLocal. Overridden in</span></span><br><span class="line"><span class="comment">     * InheritableThreadLocal.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the current thread</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstValue value for the initial entry of the map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">        t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);<span class="comment">//获取Entry</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                T result = (T)e.value;<span class="comment">//key是ThreadLocal的hashcode,value是要维护的值</span></span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Variant of set() to establish initialValue. Used instead</span></span><br><span class="line"><span class="comment">     * of set() in case user has overridden the set() method.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the initial value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        T value = initialValue();</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">            map.set(<span class="keyword">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1.<a href="https://www.jianshu.com/p/98b68c97df9b" target="_blank" rel="noopener">ThreadLocal-面试必问深度解析</a><br>2.<a href="http://ifeve.com/threadlocal%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">threadlocal使用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么用ThreadLocal&quot;&gt;&lt;a href=&quot;#为什么用ThreadLocal&quot; class=&quot;headerlink&quot; title=&quot;为什么用ThreadLocal&quot;&gt;&lt;/a&gt;为什么用ThreadLocal&lt;/h2&gt;&lt;p&gt;在多线程的环境下，每个线程都有自己的
      
    
    </summary>
    
      <category term="线程" scheme="http://fumier.github.io/categories/%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="线程安全" scheme="http://fumier.github.io/tags/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>旅游资讯20190526</title>
    <link href="http://fumier.github.io/2019/05/27/%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF20190526/"/>
    <id>http://fumier.github.io/2019/05/27/旅游资讯20190526/</id>
    <published>2019-05-26T23:06:23.000Z</published>
    <updated>2019-06-02T09:30:45.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5月23日，马蜂窝旅游网宣布完成由腾讯领投的2.5亿美元新一轮融资。</span><br></pre></td></tr></table></figure><h3 id="文章分析"><a href="#文章分析" class="headerlink" title="文章分析"></a>文章分析</h3><p><a href="https://www.traveldaily.cn/article/129385" target="_blank" rel="noopener">马蜂窝的蜜，腾讯的局</a></p><blockquote><p>屡陷风波的马蜂窝为何频受腾讯青睐？腾讯又在布一个怎样的局？<br>马蜂窝创立于2006年，2010年开始公司化运营。基于十多年的积累，马蜂窝已形成以数据驱动，以UGC(用户生产内容)为核心的“内容+交易”旅游社交平台。而这一独特的模式，也为腾讯后续的投资提供了可能。一方面，以UGC为主的内容不仅丰富了与传统OTA所不同的创新玩法，UGC模式更激发了用户的创造、分享热情，使得平台汇聚了高忠诚度的用户，最终形成一个活跃的旅游社区，与长于流量的腾讯有了可以交互连接的可能。另一方面，交易模式又使得马蜂窝在内容、社交之外拥有变现的入口，精准的高粘性用户和社交流量的价值为其预订、购票、营销等变现途径提供了保障。<br>腾讯的旅游体系中，仍然缺少优质的UGC和旅游社交平台。而马蜂窝的存在恰好弥补了这个缺口，满足腾讯想要在旅游产业面面俱到的愿望。同时，马蜂窝的内容优势可以为用户提供很好的旅游决策和旅行计划，但马蜂窝的短板也很突出：过重的内容社交弱化了交易属性，而交易又是OTA平台变现的最佳途径。于是与同程艺龙的连接水到渠成，两者的互补形成了在线旅游的交易闭环，凭借微信的流量导入，将在增量市场焕发巨大的活力。此外，两者的增长又将进一步反哺微信的用户活跃与增长。</p></blockquote><h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><ul><li>腾讯对OTA有野心，在OTA领域进行了重要布局。</li><li>马蜂窝，用户粘性高，具有社交属性，变现能力还有待观察。</li><li>与同程艺龙的连接，收益能Double吗？存疑？</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;新闻&quot;&gt;&lt;a href=&quot;#新闻&quot; class=&quot;headerlink&quot; title=&quot;新闻&quot;&gt;&lt;/a&gt;新闻&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
      <category term="资讯" scheme="http://fumier.github.io/categories/%E8%B5%84%E8%AE%AF/"/>
    
    
      <category term="旅游资讯" scheme="http://fumier.github.io/tags/%E6%97%85%E6%B8%B8%E8%B5%84%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>重新出发</title>
    <link href="http://fumier.github.io/2019/05/26/%E9%87%8D%E6%96%B0%E5%87%BA%E5%8F%91/"/>
    <id>http://fumier.github.io/2019/05/26/重新出发/</id>
    <published>2019-05-26T12:47:37.000Z</published>
    <updated>2019-05-26T09:02:59.721Z</updated>
    
    <content type="html"><![CDATA[<p>隔了很久，都没有写过博客。这一次，我要重新出发。阅读书籍，整理文字，积累知识，记录自己学习的足迹。</p><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul><li>设立目标</li><li>制定计划</li><li>定期复盘</li><li>调整计划</li><li>实现目标</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>主题选用:maupassant，详情请见:<a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="noopener">https://www.haomwei.com/technology/maupassant-hexo.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;隔了很久，都没有写过博客。这一次，我要重新出发。阅读书籍，整理文字，积累知识，记录自己学习的足迹。&lt;/p&gt;
&lt;h2 id=&quot;TODO&quot;&gt;&lt;a href=&quot;#TODO&quot; class=&quot;headerlink&quot; title=&quot;TODO&quot;&gt;&lt;/a&gt;TODO&lt;/h2&gt;&lt;ul&gt;
&lt;li
      
    
    </summary>
    
      <category term="生活" scheme="http://fumier.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://fumier.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://fumier.github.io/2019/05/25/hello-world/"/>
    <id>http://fumier.github.io/2019/05/25/hello-world/</id>
    <published>2019-05-25T10:04:59.326Z</published>
    <updated>2019-05-25T10:04:59.326Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
